#!/bin/sh
# Shim que ejecuta el hook PowerShell en Windows o el fallback Node.js
MSGFILE="$1"
SOURCE="$2"

if command -v pwsh >/dev/null 2>&1; then
  pwsh -NoProfile -NonInteractive -ExecutionPolicy Bypass -File "$(dirname "$0")/prepare-commit-msg.ps1" "$MSGFILE" "$SOURCE" "$3"
  exit $?
elif command -v powershell >/dev/null 2>&1; then
  powershell -NoProfile -NonInteractive -ExecutionPolicy Bypass -File "$(dirname "$0")/prepare-commit-msg.ps1" "$MSGFILE" "$SOURCE" "$3"
  exit $?
elif command -v node >/dev/null 2>&1; then
  node "$(dirname "$0")/prepare-commit-msg.node" "$MSGFILE" "$SOURCE" "$3"
  exit $?
else
  # nada que hacer
  exit 0
fi
#!/usr/bin/env node
// prepare-commit-msg hook: prefill commit message in Spanish with changed files summary
// Usage: git will call this with: prepare-commit-msg <path> <source> <sha1>

const fs = require('fs');
const { execSync } = require('child_process');

function safeExec(cmd) {
  try {
    return execSync(cmd, { encoding: 'utf8' }).trim();
  } catch (e) {
    return '';
  }
}

const args = process.argv.slice(2);
const msgFile = args[0];
const source = args[1] || '';

// Don't override merge/squash messages or when source is not empty
if (/merge|squash/i.test(source)) process.exit(0);

try {
  const existing = fs.readFileSync(msgFile, 'utf8');
  if (existing && existing.trim().length > 0) {
    // Do not override an explicit message
    process.exit(0);
  }
} catch (e) {
  // if can't read, bail
  process.exit(0);
}

// Get porcelain status
const status = safeExec('git status --porcelain');
if (!status) process.exit(0);

const lines = status.split(/\r?\n/).filter(Boolean);
const added = [];
const modified = [];
const deleted = [];
const renamed = [];

lines.forEach((ln) => {
  // porcelain: XY filename or R old -> new
  const code = ln.slice(0, 2).trim();
  const rest = ln.slice(3).trim();
  if (/^A/.test(code)) added.push(rest);
  else if (/^M/.test(code)) modified.push(rest);
  else if (/^D/.test(code)) deleted.push(rest);
  else if (/^R/.test(code)) renamed.push(rest);
  else {
    // fallback: if ends with -> it's a rename
    if (rest.includes('->')) renamed.push(rest);
    else modified.push(rest);
  }
});

function listToString(arr) {
  if (!arr.length) return '';
  return arr.map((f) => `- ${f}`).join('\n');
}

let titleParts = [];
if (modified.length) titleParts.push(`${modified.length} modificad${modified.length === 1 ? 'o' : 'os'}`);
if (added.length) titleParts.push(`${added.length} agregad${added.length === 1 ? 'o' : 'os'}`);
if (deleted.length) titleParts.push(`${deleted.length} eliminad${deleted.length === 1 ? 'o' : 'os'}`);
if (renamed.length) titleParts.push(`${renamed.length} renombrad${renamed.length === 1 ? 'o' : 'os'}`);

const title = titleParts.length ? `Actualización: ${titleParts.join(', ')}` : 'Actualización de código';

let body = [];
if (modified.length) body.push('\nArchivos modificados:\n' + listToString(modified));
if (added.length) body.push('\nArchivos agregados:\n' + listToString(added));
if (deleted.length) body.push('\nArchivos eliminados:\n' + listToString(deleted));
if (renamed.length) body.push('\nArchivos renombrados:\n' + listToString(renamed));

body.push('\n\\Notas:\n- Describe brevemente el porqué del cambio.');

const full = `${title}\n\n${body.join('\n')}`;

try {
  fs.writeFileSync(msgFile, full, { encoding: 'utf8' });
} catch (e) {
  // ignore
}

process.exit(0);
