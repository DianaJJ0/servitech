<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dashboard - Servitech Admin</title>
  <link rel="stylesheet" href="/assets/css/administrador.css" />
  <link rel="stylesheet" href="/assets/css/admin.css" />
  <!-- admin-responsive.css retirado: reglas migradas a hojas por página -->
  <link rel="stylesheet" href="/assets/css/admin-components.css" />
  <!-- page-specific CSS -->
  <!-- no additional page-specific CSS for dashboard -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
  <div class="admin-layout">
    <!-- Sidebar (renderizado por el servidor) -->
    <%- include('../componentes/navbarAdmin.ejs') %>

      <main class="admin-main">
        <header class="admin-header">
          <div class="header-search">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="Buscar en ServiTech..." />
          </div>
          <div class="header-actions">
            <div class="notification-icon">
              <i class="fas fa-bell"></i>
              <span class="notification-badge">5</span>
            </div>
            <div class="admin-profile">
              <img src="https://i.pravatar.cc/150?img=11" alt="Admin profile" class="profile-img" />
              <div class="profile-info">
                <span class="profile-name">Admin ServiTech</span>
                <span class="profile-role">Administrador</span>
              </div>
              <i class="fas fa-chevron-down"></i>
            </div>
          </div>
        </header>

        <div class="admin-content">
          <div class="page-header">
            <h1>Dashboard</h1>
            <div class="page-actions">
              <button class="btn-outline">
                <i class="fas fa-calendar-alt"></i>
                <span>Último mes</span>
              </button>
              <button class="btn-primary">
                <i class="fas fa-file-export"></i>
                <span>Descargar reporte</span>
              </button>
            </div>
          </div>

          <div class="stats-mini-grid">
            <div class="stat-card">
              <div class="stat-icon stat-icon--accent">
                <i class="fas fa-user-tie"></i>
              </div>
              <div class="stat-details">
                <h3>Expertos Totales</h3>
                <span class="stat-value">128</span>
                <div class="stat-trend trend-up">
                  <i class="fas fa-arrow-up"></i>
                  <span>12% vs mes anterior</span>
                </div>
              </div>
            </div>
            <div class="stat-card">
              <div class="stat-icon stat-icon--secondary">
                <i class="fas fa-users"></i>
              </div>
              <div class="stat-details">
                <h3>Usuarios Registrados</h3>
                <span class="stat-value">1,493</span>
                <div class="stat-trend trend-up">
                  <i class="fas fa-arrow-up"></i>
                  <span>8% vs mes anterior</span>
                </div>
              </div>
            </div>
            <div class="stat-card">
              <div class="stat-icon stat-icon--danger">
                <i class="fas fa-ticket-alt"></i>
              </div>
              <div class="stat-details">
                <h3>Solicitudes Abiertas</h3>
                <span class="stat-value">57</span>
                <div class="stat-trend trend-down">
                  <i class="fas fa-arrow-down"></i>
                  <span>3% vs mes anterior</span>
                </div>
              </div>
            </div>
            <div class="stat-card">
              <div class="stat-icon stat-icon--success">
                <i class="fas fa-money-bill-wave"></i>
              </div>
              <div class="stat-details">
                <h3>Ingresos Mensuales</h3>
                <span class="stat-value">$15,840</span>
                <div class="stat-trend trend-up">
                  <i class="fas fa-arrow-up"></i>
                  <span>15% vs mes anterior</span>
                </div>
              </div>
            </div>
          </div>

          <div class="dashboard-charts-row">
            <div class="table-container">
              <div class="dashboard-table-header">
                <h3 class="dashboard-table-title">Tendencia de Usuarios</h3>
                <div class="dashboard-table-actions">
                  <button class="btn-outline btn-xs">Diario</button>
                  <button class="btn-primary btn-xs">Mensual</button>
                  <button class="btn-outline btn-xs">Anual</button>
                </div>
              </div>
              <div class="dashboard-table-body">
                <canvas id="userTrendChart" height="300"></canvas>
              </div>
            </div>

            <div class="table-container">
              <div class="dashboard-table-header">
                <h3 class="dashboard-table-title">
                  Distribución por Categoría
                </h3>
              </div>
              <div class="dashboard-table-body">
                <canvas id="categoryChart" height="300"></canvas>
              </div>
            </div>
          </div>

          <div class="admin-dashboard-row">
            <div class="table-container">
              <div class="admin-dashboard-table-header">
                <h3 class="admin-dashboard-table-title">Expertos destacados</h3>
              </div>
              <div id="featuredExperts">
                <div class="admin-dashboard-expert-row">
                  <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="Experto"
                    class="admin-dashboard-expert-img" />
                  <div class="admin-dashboard-expert-info">
                    <h4 class="admin-dashboard-expert-name">Mario Velázquez</h4>
                    <p class="admin-dashboard-expert-specialty">
                      Desarrollo Web
                    </p>
                  </div>
                  <div class="admin-dashboard-expert-rating">
                    <div class="admin-dashboard-expert-rating-stars">
                      <i class="fas fa-star"></i>
                      <span>5.0</span>
                    </div>
                    <span class="admin-dashboard-expert-sessions">24 sesiones</span>
                  </div>
                </div>
                <div class="admin-dashboard-expert-row">
                  <img src="https://randomuser.me/api/portraits/women/44.jpg" alt="Experto"
                    class="admin-dashboard-expert-img" />
                  <div class="admin-dashboard-expert-info">
                    <h4 class="admin-dashboard-expert-name">Ana García</h4>
                    <p class="admin-dashboard-expert-specialty">UX/UI Design</p>
                  </div>
                  <div class="admin-dashboard-expert-rating">
                    <div class="admin-dashboard-expert-rating-stars">
                      <i class="fas fa-star"></i>
                      <span>4.5</span>
                    </div>
                    <span class="admin-dashboard-expert-sessions">18 sesiones</span>
                  </div>
                </div>
                <div class="admin-dashboard-expert-row">
                  <img src="https://randomuser.me/api/portraits/men/22.jpg" alt="Experto"
                    class="admin-dashboard-expert-img" />
                  <div class="admin-dashboard-expert-info">
                    <h4 class="admin-dashboard-expert-name">Pedro Ramírez</h4>
                    <p class="admin-dashboard-expert-specialty">
                      Mobile Development
                    </p>
                  </div>
                  <div class="admin-dashboard-expert-rating">
                    <div class="admin-dashboard-expert-rating-stars">
                      <i class="fas fa-star"></i>
                      <span>4.8</span>
                    </div>
                    <span class="admin-dashboard-expert-sessions">16 sesiones</span>
                  </div>
                </div>
                <div class="admin-dashboard-expert-link-row">
                  <a href="admin-expertos.html" id="viewAllExpertsLink" class="admin-dashboard-link">
                    Ver todos los expertos
                    <i class="fas fa-chevron-right admin-dashboard-link-icon"></i>
                  </a>
                </div>
              </div>
            </div>

            <div class="table-container">
              <div class="admin-dashboard-table-header">
                <h3 class="admin-dashboard-table-title">Actividad reciente</h3>
              </div>
              <div id="activityList">
                <div class="admin-dashboard-activity-row">
                  <div class="admin-dashboard-activity-icon admin-dashboard-activity-icon--accent">
                    <i class="fas fa-user-plus"></i>
                  </div>
                  <div class="admin-dashboard-activity-info">
                    <h4 class="admin-dashboard-activity-title">
                      Nuevo experto registrado
                    </h4>
                    <p class="admin-dashboard-activity-time">Hace 2 horas</p>
                  </div>
                  <p class="admin-dashboard-activity-desc">
                    Alejandro Ruiz se ha registrado como experto en Cloud
                    Computing.
                  </p>
                </div>
                <div class="admin-dashboard-activity-row">
                  <div class="admin-dashboard-activity-icon admin-dashboard-activity-icon--danger">
                    <i class="fas fa-ticket-alt"></i>
                  </div>
                  <div class="admin-dashboard-activity-info">
                    <h4 class="admin-dashboard-activity-title">
                      Nueva solicitud de soporte
                    </h4>
                    <p class="admin-dashboard-activity-time">Hace 5 horas</p>
                  </div>
                  <p class="admin-dashboard-activity-desc">
                    Maria López ha reportado un problema con la plataforma de
                    pagos.
                  </p>
                </div>
                <div class="admin-dashboard-activity-row">
                  <div class="admin-dashboard-activity-icon admin-dashboard-activity-icon--success">
                    <i class="fas fa-check-circle"></i>
                  </div>
                  <div class="admin-dashboard-activity-info">
                    <h4 class="admin-dashboard-activity-title">
                      Sesión completada
                    </h4>
                    <p class="admin-dashboard-activity-time">Hace 8 horas</p>
                  </div>
                  <p class="admin-dashboard-activity-desc">
                    Mario Velázquez completó una sesión con Juan Martinez (5★).
                  </p>
                </div>
                <div class="admin-dashboard-activity-link-row">
                  <a href="#" id="viewAllActivityLink" class="admin-dashboard-link">
                    Ver toda la actividad
                    <i class="fas fa-chevron-right admin-dashboard-link-icon"></i>
                  </a>
                </div>
              </div>
            </div>
          </div>

          <div class="table-container">
            <div class="dashboard-table-header dashboard-table-header--border">
              <h3 class="dashboard-table-title">Últimas solicitudes</h3>
              <div class="dashboard-table-actions">
                <select id="filterStatus" class="btn-outline btn-sm">
                  <option value="">Todos</option>
                  <option value="pendiente">Pendiente</option>
                  <option value="confirmada">Confirmada</option>
                  <option value="completada">Completada</option>
                </select>
                <button id="refreshRequests" class="btn-outline btn-sm" title="Actualizar">
                  <i class="fas fa-sync-alt"></i>
                </button>
              </div>
            </div>
            <table class="admin-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Usuario</th>
                  <th>Tipo</th>
                  <th>Categoría</th>
                  <th>Fecha</th>
                  <th>Estado</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody id="latest-requests-body">
                <!-- Rows will be populated by client-side JS -->
                <tr class="loading-row">
                  <td colspan="7">Cargando...</td>
                </tr>
              </tbody>
            </table>
          </div>

          <!-- Modal detalles de solicitud -->
          <div id="requestDetailsModal" class="modal" role="dialog" aria-hidden="true" style="display:none;">
            <div class="modal-content">
              <button class="modal-close" id="modalCloseBtn">×</button>
              <h3 id="modalTitle">Detalle de solicitud</h3>
              <div id="modalBody">
                <p>Cargando...</p>
              </div>
            </div>
          </div>

        </div>
      </main>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="/assets/js/admin/admin-common.js"></script>
  <script src="/assets/js/admin/admin.js"></script>

  <script>
    (function () {
      const tbody = document.getElementById('latest-requests-body');
      const filterStatus = document.getElementById('filterStatus');
      const refreshBtn = document.getElementById('refreshRequests');
      const modal = document.getElementById('requestDetailsModal');
      const modalBody = document.getElementById('modalBody');
      const modalTitle = document.getElementById('modalTitle');
      const modalClose = document.getElementById('modalCloseBtn');

      // Mock data for local/dev testing when backend returns 401/403 or is down
      const mockData = [
        {
          _id: 'mock-1',
          cliente: { nombre: 'Juan Pérez', email: 'juan.perez@example.com', avatarUrl: 'https://i.pravatar.cc/40?img=5' },
          tipo: 'Asesoría',
          categoria: 'Finanzas',
          fechaHoraInicio: new Date().toISOString(),
          estado: 'pendiente'
        },
        {
          _id: 'mock-2',
          cliente: { nombre: 'María López', email: 'maria.lopez@example.com', avatarUrl: 'https://i.pravatar.cc/40?img=12' },
          tipo: 'Consultoría',
          categoria: 'Marketing',
          createdAt: new Date().toISOString(),
          estado: 'confirmada'
        },
        {
          _id: 'mock-3',
          cliente: { nombre: 'Carlos Gómez', email: 'carlos.gomez@example.com', avatarUrl: 'https://i.pravatar.cc/40?img=22' },
          tipo: 'Soporte',
          categoria: 'Pagos',
          fecha: new Date().toISOString(),
          estado: 'completada'
        }
      ];

      async function fetchRequests() {
        tbody.innerHTML = '<tr class="loading-row"><td colspan="7">Cargando...</td></tr>';
        try {
          const res = await fetch('/api/asesorias');
          if (!res.ok) {
            // handle auth/permission problems gracefully and offer a dev fallback
            if (res.status === 401 || res.status === 403) {
              showAuthError(res.status);
              return;
            }
            throw new Error('Error fetching solicitudes: ' + res.status);
          }
          const data = await res.json();
          renderRows(Array.isArray(data) ? data : []);
        } catch (err) {
          console.error(err);
          tbody.innerHTML = '<tr><td colspan="7">Error al cargar datos. <button id="loadMock" class="btn-outline btn-sm">Cargar datos de ejemplo</button></td></tr>';
          const btn = document.getElementById('loadMock');
          if (btn) btn.addEventListener('click', () => loadMockData());
        }
      }

      function showAuthError(status) {
        const message = status === 401
          ? 'No autenticado. Por favor inicie sesión como administrador.'
          : 'Acceso denegado. Su sesión no tiene permisos de administrador (403).';
        tbody.innerHTML = `<tr><td colspan="7">${escapeHtml(message)} <a href="/login.html">Ir a login</a> — o bien <button id="loadMock" class="btn-outline btn-sm">Cargar ejemplo</button></td></tr>`;
        const btn = document.getElementById('loadMock');
        if (btn) btn.addEventListener('click', loadMockData);
      }

      function loadMockData() {
        renderRows(mockData);
      }

      function formatDate(d) {
        try {
          const dt = new Date(d);
          return dt.toLocaleDateString();
        } catch (e) {
          return d || '';
        }
      }

      function renderRows(items) {
        const statusFilter = (filterStatus && filterStatus.value) || '';
        const filtered = items.filter(i => !statusFilter || (i.estado && i.estado.toLowerCase().includes(statusFilter)));
        if (!filtered.length) {
          tbody.innerHTML = '<tr><td colspan="7">No hay solicitudes</td></tr>';
          return;
        }
        tbody.innerHTML = '';
        filtered.slice(0, 10).forEach(item => {
          const tr = document.createElement('tr');
          const cliente = item.cliente || item.customer || {};
          const nombre = cliente.nombre || (cliente.email || 'Usuario');
          const email = cliente.email || '';
          tr.innerHTML = `
            <td>${item._id || item.id || ''}</td>
            <td>
              <div class="user-info">
                <img src="${(cliente.avatarUrl || 'https://i.pravatar.cc/40')}" alt="Usuario" />
                <div>
                  <h4>${escapeHtml(nombre)}</h4>
                  <span>${escapeHtml(email)}</span>
                </div>
              </div>
            </td>
            <td>${escapeHtml(item.tipo || item.servicio || '')}</td>
            <td>${escapeHtml(item.categoria || '')}</td>
            <td>${formatDate(item.fechaHoraInicio || item.createdAt || item.fecha)}</td>
            <td><span class="status ${escapeHtml((item.estado || '').toLowerCase())}">${escapeHtml(item.estado || '')}</span></td>
            <td>
              <div class="action-buttons">
                <button class="btn-icon dashboard-view-btn" data-id="${item._id || item.id || ''}" title="Ver detalles">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
            </td>
          `;
          tbody.appendChild(tr);
        });
        // bind view buttons
        tbody.querySelectorAll('.dashboard-view-btn').forEach(btn => {
          btn.addEventListener('click', async (e) => {
            const id = btn.getAttribute('data-id');
            if (!id) return;
            await openDetails(id);
          });
        });
      }

      function escapeHtml(str) {
        if (!str && str !== 0) return '';
        return String(str).replace(/[&<>"'`]/g, s => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;', '`': '&#96;' })[s]);
      }

      async function openDetails(id) {
        modalBody.innerHTML = '<p>Cargando...</p>';
        modalTitle.textContent = 'Detalle solicitud ' + id;
        showModal(true);
        try {
          const res = await fetch('/api/asesorias/' + encodeURIComponent(id));
          if (!res.ok) throw new Error('No encontrado');
          const data = await res.json();
          modalBody.innerHTML = `<pre style="white-space:pre-wrap">${escapeHtml(JSON.stringify(data, null, 2))}</pre>`;
        } catch (err) {
          modalBody.innerHTML = '<p>Error al cargar detalles</p>';
        }
      }

      function showModal(show) {
        if (!modal) return;
        modal.style.display = show ? 'block' : 'none';
        modal.setAttribute('aria-hidden', show ? 'false' : 'true');
      }

      if (modalClose) modalClose.addEventListener('click', () => showModal(false));
      if (refreshBtn) refreshBtn.addEventListener('click', fetchRequests);
      if (filterStatus) filterStatus.addEventListener('change', fetchRequests);

      // inicial
      fetchRequests();

      // -------------------------
      // Expertos destacados
      // -------------------------
      const featuredContainer = document.getElementById('featuredExperts');

      const mockExperts = [
        { _id: 'e1', nombre: 'Mario', apellido: 'Velázquez', avatar: 'https://randomuser.me/api/portraits/men/32.jpg', infoExperto: { descripcion: 'Desarrollo Web', categorias: ['Desarrollo'] }, calificacionPromedio: 5.0, sesiones: 24 },
        { _id: 'e2', nombre: 'Ana', apellido: 'García', avatar: 'https://randomuser.me/api/portraits/women/44.jpg', infoExperto: { descripcion: 'UX/UI Design', categorias: ['Diseño'] }, calificacionPromedio: 4.5, sesiones: 18 },
        { _id: 'e3', nombre: 'Pedro', apellido: 'Ramírez', avatar: 'https://randomuser.me/api/portraits/men/22.jpg', infoExperto: { descripcion: 'Mobile Development', categorias: ['Mobile'] }, calificacionPromedio: 4.8, sesiones: 16 }
      ];

      async function fetchExperts() {
        if (!featuredContainer) return;
        // show loading
        featuredContainer.innerHTML = '<div class="loading-row">Cargando expertos destacados...</div>';
        try {
          const res = await fetch('/api/expertos?limit=3');
          if (!res.ok) {
            if (res.status === 401 || res.status === 403) {
              // permissions issue, show fallback
              renderExperts([]);
              attachExpertsFallback();
              return;
            }
            throw new Error('Error fetching expertos: ' + res.status);
          }
          const payload = await res.json();
          const items = (payload && payload.data) ? payload.data : payload;
          renderExperts(Array.isArray(items) ? items : []);
        } catch (err) {
          console.error('Expertos error', err);
          renderExperts(mockExperts);
          attachExpertsFallback();
        }
      }

      function renderExperts(items) {
        if (!featuredContainer) return;
        if (!items || !items.length) {
          featuredContainer.innerHTML = '<div class="admin-dashboard-expert-row"><p>No hay expertos destacados</p></div>';
          return;
        }
        const html = items.map(it => {
          const name = `${escapeHtml(it.nombre || it.nombre)} ${escapeHtml(it.apellido || '')}`.trim();
          const specialty = (it.infoExperto && (it.infoExperto.descripcion || (it.infoExperto.categorias && it.infoExperto.categorias[0]))) || '';
          const avatar = it.avatar || (it.infoExperto && it.infoExperto.avatar) || 'https://i.pravatar.cc/80';
          const rating = it.calificacionPromedio ? Number(it.calificacionPromedio).toFixed(1) : '';
          const sesiones = it.sesiones || (it.infoExperto && it.infoExperto.sesiones) || '';
          return `
            <div class="admin-dashboard-expert-row">
              <img src="${escapeHtml(avatar)}" alt="Experto" class="admin-dashboard-expert-img" />
              <div class="admin-dashboard-expert-info">
                <h4 class="admin-dashboard-expert-name">${escapeHtml(name)}</h4>
                <p class="admin-dashboard-expert-specialty">${escapeHtml(specialty)}</p>
              </div>
              <div class="admin-dashboard-expert-rating">
                <div class="admin-dashboard-expert-rating-stars">
                  <i class="fas fa-star"></i>
                  <span>${escapeHtml(rating)}</span>
                </div>
                <span class="admin-dashboard-expert-sessions">${escapeHtml(sesiones ? sesiones + ' sesiones' : '')}</span>
              </div>
            </div>
          `;
        }).join('');
        // add link row at the end
        const linkRow = `<div class="admin-dashboard-expert-link-row"><a href="/admin-expertos.html" class="admin-dashboard-link">Ver todos los expertos<i class="fas fa-chevron-right admin-dashboard-link-icon"></i></a></div>`;
        featuredContainer.innerHTML = html + linkRow;
      }

      function attachExpertsFallback() {
        if (!featuredContainer) return;
        const fallback = document.createElement('div');
        fallback.style.marginTop = '8px';
        fallback.innerHTML = '<button id="loadExpertsMock" class="btn-outline btn-sm">Cargar expertos de ejemplo</button>';
        featuredContainer.appendChild(fallback);
        const b = document.getElementById('loadExpertsMock');
        if (b) b.addEventListener('click', () => renderExperts(mockExperts));
      }

      // init experts
      fetchExperts();

      // -------------------------
      // Actividad reciente (logs)
      // -------------------------
      const activityContainer = document.getElementById('activityList');
      const viewAllActivityLink = document.getElementById('viewAllActivityLink');

      const mockActivities = [
        { tipo: 'REGISTRO_EXPERTO', descripcion: 'Nuevo experto registrado: Laura Méndez', fecha: new Date().toISOString(), nivel: 'info' },
        { tipo: 'NUEVA_SOLICITUD', descripcion: 'Solicitud de soporte de Maria López', fecha: new Date(Date.now() - 1000 * 60 * 60 * 5).toISOString(), nivel: 'warning' },
        { tipo: 'SESION_COMPLETADA', descripcion: 'Sesión completada por Mario Velázquez', fecha: new Date(Date.now() - 1000 * 60 * 60 * 8).toISOString(), nivel: 'success' }
      ];

      async function fetchActivities() {
        if (!activityContainer) return;
        activityContainer.innerHTML = '<div class="loading-row">Cargando actividad...</div>';
        try {
          const res = await fetch('/api/logs');
          if (!res.ok) {
            if (res.status === 401 || res.status === 403) {
              renderActivities([]);
              attachActivityFallback();
              return;
            }
            throw new Error('Error fetching activities: ' + res.status);
          }
          const data = await res.json();
          renderActivities(Array.isArray(data) ? data.slice(0, 10) : []);
        } catch (err) {
          console.error('Actividad error', err);
          renderActivities(mockActivities);
          attachActivityFallback();
        }
      }

      function renderActivities(items) {
        if (!activityContainer) return;
        if (!items || !items.length) {
          activityContainer.innerHTML = '<div class="admin-dashboard-activity-row"><p>No hay actividad reciente</p></div>';
          return;
        }
        // build markup
        const html = items.map(it => {
          const iconClass = it.nivel === 'warning' ? 'admin-dashboard-activity-icon--danger' : (it.nivel === 'success' ? 'admin-dashboard-activity-icon--success' : 'admin-dashboard-activity-icon--accent');
          const timeAgo = timeAgoString(it.fecha || it.createdAt || new Date().toISOString());
          return `
            <div class="admin-dashboard-activity-row">
              <div class="admin-dashboard-activity-icon ${iconClass}">
                <i class="fas fa-bell"></i>
              </div>
              <div class="admin-dashboard-activity-info">
                <h4 class="admin-dashboard-activity-title">${escapeHtml(it.tipo || '')}</h4>
                <p class="admin-dashboard-activity-time">${escapeHtml(timeAgo)}</p>
              </div>
              <p class="admin-dashboard-activity-desc">${escapeHtml(it.descripcion || it.detalle || '')}</p>
            </div>
          `;
        }).join('');
        // append link row
        const linkRow = `<div class="admin-dashboard-activity-link-row"><a href="/admin-logs.html" class="admin-dashboard-link">Ver toda la actividad<i class="fas fa-chevron-right admin-dashboard-link-icon"></i></a></div>`;
        activityContainer.innerHTML = html + linkRow;
      }

      function attachActivityFallback() {
        if (!activityContainer) return;
        // provide a small control to load mock activities
        const fallback = document.createElement('div');
        fallback.style.marginTop = '8px';
        fallback.innerHTML = '<button id="loadActivityMock" class="btn-outline btn-sm">Cargar actividad de ejemplo</button>';
        activityContainer.appendChild(fallback);
        const b = document.getElementById('loadActivityMock');
        if (b) b.addEventListener('click', () => renderActivities(mockActivities));
      }

      function timeAgoString(iso) {
        try {
          const diff = Date.now() - new Date(iso).getTime();
          const mins = Math.floor(diff / (1000 * 60));
          if (mins < 60) return `${mins} min`;
          const hours = Math.floor(mins / 60);
          if (hours < 24) return `${hours} horas`;
          const days = Math.floor(hours / 24);
          return `${days} días`;
        } catch (e) {
          return '';
        }
      }

      // init activities after requests
      fetchActivities();
    })();
  </script>

</body>

</html>
